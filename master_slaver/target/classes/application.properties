server.port=8082
server.servlet.context-path = /
spring.resources.static-locations=classpath:/templates/
spring.servlet.multipart.max-request-size=500MB
spring.servlet.multipart.max-file-size=100MB
spring.main.allow-bean-definition-overriding = true
mybatis.configuration.map-underscore-to-camel-case = true

mybatis.config-locations=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml

#数据源
spring.shardingsphere.datasource.names = m0,m1,m2,s0,s1,s2
#master m0,m1,m2
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3307/store_db?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=root


spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3307/product_db_1?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root

spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3307/product_db_2?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=root

# slave
spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s0.url=jdbc:mysql://localhost:3308/store_db?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.s0.username=root
spring.shardingsphere.datasource.s0.password=root


spring.shardingsphere.datasource.s1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s1.url=jdbc:mysql://localhost:3308/product_db_1?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.s1.username=root
spring.shardingsphere.datasource.s1.password=root

spring.shardingsphere.datasource.s2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s2.url=jdbc:mysql://localhost:3308/product_db_2?useUnicode=true&useSSL=false
spring.shardingsphere.datasource.s2.username=root
spring.shardingsphere.datasource.s2.password=root


#配置主从关系
spring.shardingsphere.sharding.master-slave-rules.ms0.master-data-source-name = m0
spring.shardingsphere.sharding.master-slave-rules.ms0.slave-data-source-names = s0

spring.shardingsphere.sharding.master-slave-rules.ms1.master-data-source-name = m1
spring.shardingsphere.sharding.master-slave-rules.ms1.slave-data-source-names = s1

spring.shardingsphere.sharding.master-slave-rules.ms2.master-data-source-name = m2
spring.shardingsphere.sharding.master-slave-rules.ms2.slave-data-source-names = s2


#分库策略(水平分库)
spring.shardingsphere.sharding.database-strategy.inline.sharding-column=store_info_id
spring.shardingsphere.sharding.database-strategy.inline.algorithm-expression=ms$->{store_info_id % 2 + 1}


#分表策略
spring.shardingsphere.sharding.tables.store_info.actual-data-nodes=ms0.store_info
spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.algorithm-expression=store_info
spring.shardingsphere.sharding.tables.store_info.key-generator.column=id
spring.shardingsphere.sharding.tables.store_info.key-generator.type=SNOWFLAKE


#商品信息表
#数据节点
spring.shardingsphere.sharding.tables.product_info.actual-data-nodes=ms$->{1..2}.product_info_$->{1..2}
#分片键
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.sharding-column=product_info_id
#分片策略
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.algorithm-expression=product_info_$->{product_info_id % 2 + 1}
# 指定product_info表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.product_info.key-generator.column=product_info_id
spring.shardingsphere.sharding.tables.product_info.key-generator.type=SNOWFLAKE


#商品描述表
#数据节点
spring.shardingsphere.sharding.tables.product_descript.actual-data-nodes=ms$->{1..2}.product_descript_$->{1..2}
#分片键
spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.sharding-column=product_info_id
#分片策略
spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.algorithm-expression=product_descript_$->{product_info_id % 2 + 1}
# 指定product_descript表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.product_descript.key-generator.column=id
spring.shardingsphere.sharding.tables.product_descript.key-generator.type=SNOWFLAKE

#设置绑定表
spring.shardingsphere.sharding.binding-tables=product_descript,product_info

#公共表
spring.shardingsphere.sharding.broadcast-tables=region

spring.shardingsphere.props.sql.show = true


swagger.enable = true

# 日志打印配置
logging.level.root=info
logging.level.org.springframework.web=info
logging.level.com.why.shardingjdbc=info
logging.level.druid.sql=info